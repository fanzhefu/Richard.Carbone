{
  "id": "threat-actor--2f6e8ce0-e46b-5944-be7e-1c0fcf1d848a",
  "name": "UNC1732",
  "type": "actor-mitre",
  "attack-patterns": {
    "Persistence": [
      {
        "id": "attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Execution": [
      {
        "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Privilege Escalation": [
      {
        "id": "attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Defense Evasion": [
      {
        "id": "attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a",
        "attribution_scope": "confirmed"
      }
    ],
    "Credential Access": [
      {
        "id": "attack-pattern--bb5a00de-e086-4859-a231-fa793f6797e2",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Discovery": [
      {
        "id": "attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--e3b6daca-e963-4a69-aee6-ed4fd653ad58",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--322bad5a-1c49-4d23-ab79-76d641794afa",
        "attribution_scope": "confirmed"
      }
    ],
    "Collection": [
      {
        "id": "attack-pattern--bb5a00de-e086-4859-a231-fa793f6797e2",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Initial Access": [
      {
        "id": "attack-pattern--a62a8db3-f23a-4d8f-afd6-9dbc77e7813b",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Command and Control": [
      {
        "id": "attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add",
        "attribution_scope": "confirmed"
      }
    ]
  },
  "is_publishable": true
}
"{\"threat-actors\": [{\"id\": \"threat-actor--2f6e8ce0-e46b-5944-be7e-1c0fcf1d848a\", \"name\": \"UNC1732\", \"type\": \"actor-mitre\", \"attack-patterns\": {\"Persistence\": [{\"id\": \"attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279\", \"attribution_scope\": \"confirmed\"}]}], \"Execution\": [{\"id\": \"attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e\", \"attribution_scope\": \"confirmed\"}]}], \"Privilege Escalation\": [{\"id\": \"attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279\", \"attribution_scope\": \"confirmed\"}]}], \"Defense Evasion\": [{\"id\": \"attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a\", \"attribution_scope\": \"confirmed\"}], \"Credential Access\": [{\"id\": \"attack-pattern--bb5a00de-e086-4859-a231-fa793f6797e2\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4\", \"attribution_scope\": \"confirmed\"}]}], \"Discovery\": [{\"id\": \"attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--e3b6daca-e963-4a69-aee6-ed4fd653ad58\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--322bad5a-1c49-4d23-ab79-76d641794afa\", \"attribution_scope\": \"confirmed\"}], \"Collection\": [{\"id\": \"attack-pattern--bb5a00de-e086-4859-a231-fa793f6797e2\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4\", \"attribution_scope\": \"confirmed\"}]}], \"Initial Access\": [{\"id\": \"attack-pattern--a62a8db3-f23a-4d8f-afd6-9dbc77e7813b\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597\", \"attribution_scope\": \"confirmed\"}]}], \"Command and Control\": [{\"id\": \"attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add\", \"attribution_scope\": \"confirmed\"}]}, \"is_publishable\": true}], \"attack-patterns\": {\"attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:56.776Z\", \"name\": \"Application Layer Protocol\", \"attack_pattern_identifier\": \"T1071\", \"description\": \"Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \\n\\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. \", \"modified\": \"2020-10-21T16:35:45.986Z\", \"id\": \"attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6\"}, \"attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2019-04-17T22:22:24.505Z\", \"name\": \"Virtualization/Sandbox Evasion\", \"attack_pattern_identifier\": \"T1497\", \"modified\": \"2020-07-01T16:32:02.272Z\", \"description\": \"Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors. \\n\\nAdversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)\\n\\n\", \"id\": \"attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d\"}, \"attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:04.710Z\", \"name\": \"File and Directory Discovery\", \"attack_pattern_identifier\": \"T1083\", \"modified\": \"2020-09-16T16:02:16.770Z\", \"description\": \"Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. (Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106).\", \"id\": \"attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18\"}, \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:47.843Z\", \"name\": \"Process Injection\", \"attack_pattern_identifier\": \"T1055\", \"description\": \"Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \\n\\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \\n\\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. \", \"modified\": \"2020-06-20T22:28:45.651Z\", \"id\": \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\"}, \"attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:23.587Z\", \"name\": \"Modify Registry\", \"attack_pattern_identifier\": \"T1112\", \"description\": \"Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\\n\\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\\n\\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps Hiding Reg Jul 2017)\\n\\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.\", \"modified\": \"2020-08-13T20:02:49.641Z\", \"id\": \"attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4\"}, \"attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-01-23T17:46:59.535Z\", \"name\": \"Boot or Logon Autostart Execution\", \"attack_pattern_identifier\": \"T1547\", \"description\": \"Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming)\\u00a0 These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\\n\\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.\", \"modified\": \"2020-10-09T16:05:36.772Z\", \"id\": \"attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf\"}, \"attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-11T18:58:11.791Z\", \"name\": \"Keylogging\", \"attack_pattern_identifier\": \"T1056.001\", \"description\": \"Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.\\n\\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\\n\\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\\n* Reading raw keystroke data from the hardware buffer.\\n* Windows Registry modifications.\\n* Custom drivers.\\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) \", \"modified\": \"2020-10-21T01:30:56.227Z\", \"id\": \"attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4\"}, \"attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-12-14T16:46:06.044Z\", \"name\": \"Access Token Manipulation\", \"attack_pattern_identifier\": \"T1134\", \"description\": \"Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\\n\\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\\n\\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.\", \"modified\": \"2020-04-16T19:37:02.355Z\", \"id\": \"attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48\"}, \"attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-02T19:05:18.137Z\", \"name\": \"Spearphishing Attachment\", \"attack_pattern_identifier\": \"T1566.001\", \"description\": \"Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.\\n\\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.\", \"modified\": \"2020-10-18T01:52:25.316Z\", \"id\": \"attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597\"}, \"attack-pattern--e3b6daca-e963-4a69-aee6-ed4fd653ad58\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2019-09-16T17:52:44.147Z\", \"name\": \"Software Discovery\", \"attack_pattern_identifier\": \"T1518\", \"description\": \"Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1518) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).\", \"modified\": \"2020-09-16T19:36:17.133Z\", \"id\": \"attack-pattern--e3b6daca-e963-4a69-aee6-ed4fd653ad58\"}, \"attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2018-04-18T17:59:24.739Z\", \"name\": \"User Execution\", \"attack_pattern_identifier\": \"T1204\", \"modified\": \"2020-03-11T14:55:56.315Z\", \"description\": \"An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\\n\\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\", \"id\": \"attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5\"}, \"attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:16.408Z\", \"name\": \"Ingress Tool Transfer\", \"attack_pattern_identifier\": \"T1105\", \"modified\": \"2020-03-20T15:42:48.595Z\", \"description\": \"Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.\", \"id\": \"attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add\"}, \"attack-pattern--a62a8db3-f23a-4d8f-afd6-9dbc77e7813b\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-03-02T18:45:07.892Z\", \"name\": \"Phishing\", \"attack_pattern_identifier\": \"T1566\", \"description\": \"Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\\n\\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems or to gather credentials for use of [Valid Accounts](https://attack.mitre.org/techniques/T1078). Phishing may also be conducted via third-party services, like social media platforms.\", \"modified\": \"2020-10-18T01:55:03.337Z\", \"id\": \"attack-pattern--a62a8db3-f23a-4d8f-afd6-9dbc77e7813b\"}, \"attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-31T12:35:36.479Z\", \"name\": \"File Deletion\", \"attack_pattern_identifier\": \"T1070.004\", \"description\": \"Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\\n\\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native [cmd](https://attack.mitre.org/software/S0106) functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools)\", \"modified\": \"2020-03-29T21:34:16.209Z\", \"id\": \"attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c\"}, \"attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:48.728Z\", \"name\": \"Process Discovery\", \"attack_pattern_identifier\": \"T1057\", \"modified\": \"2020-03-26T18:05:53.130Z\", \"description\": \"Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1057) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nIn Windows environments, adversaries could obtain details on running processes using the [Tasklist](https://attack.mitre.org/software/S0057) utility via [cmd](https://attack.mitre.org/software/S0106) or <code>Get-Process</code> via [PowerShell](https://attack.mitre.org/techniques/T1059/001). Information about processes can also be extracted from the output of [Native API](https://attack.mitre.org/techniques/T1106) calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via /proc.\", \"id\": \"attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580\"}, \"attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-17T19:13:50.402Z\", \"name\": \"Windows Service\", \"attack_pattern_identifier\": \"T1543.003\", \"description\": \"Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and [Reg](https://attack.mitre.org/software/S0075). \\n\\nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.\\n\\nAn adversary may also incorporate [Masquerading](https://attack.mitre.org/techniques/T1036) by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \\n\\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002). \", \"modified\": \"2020-09-16T15:49:58.490Z\", \"id\": \"attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32\"}, \"attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:32.662Z\", \"name\": \"Obfuscated Files or Information\", \"attack_pattern_identifier\": \"T1027\", \"description\": \"Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \\n\\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. \\n\\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\\n\\nAdversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) \", \"modified\": \"2020-09-16T19:24:20.601Z\", \"id\": \"attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a\"}, \"attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:10.728Z\", \"name\": \"Non-Application Layer Protocol\", \"attack_pattern_identifier\": \"T1095\", \"modified\": \"2020-10-21T19:41:49.412Z\", \"description\": \"Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.(Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\\n\\nICMP communication between hosts is one example.(Citation: Cisco Synful Knock Evolution)\\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; (Citation: Microsoft ICMP) however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\", \"id\": \"attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b\"}, \"attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-14T01:28:32.166Z\", \"name\": \"Thread Execution Hijacking\", \"attack_pattern_identifier\": \"T1055.003\", \"description\": \"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \\n\\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Endgame Process Injection July 2017)\\n\\nThis is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  \\n\\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. \", \"modified\": \"2020-06-20T22:21:29.233Z\", \"id\": \"attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6\"}, \"attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:25.584Z\", \"name\": \"Query Registry\", \"attack_pattern_identifier\": \"T1012\", \"description\": \"Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\\n\\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\", \"modified\": \"2020-03-26T18:08:20.049Z\", \"id\": \"attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896\"}, \"attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-01-10T16:03:18.865Z\", \"name\": \"Create or Modify System Process\", \"attack_pattern_identifier\": \"T1543\", \"description\": \"Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. (Citation: TechNet Services) On macOS, launchd processes known as [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) \\n\\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \\n\\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges. (Citation: OSX Malware Detection).  \", \"modified\": \"2020-10-09T13:46:29.922Z\", \"id\": \"attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5\"}, \"attack-pattern--bb5a00de-e086-4859-a231-fa793f6797e2\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:48.323Z\", \"name\": \"Input Capture\", \"attack_pattern_identifier\": \"T1056\", \"description\": \"Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004)) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. [Web Portal Capture](https://attack.mitre.org/techniques/T1056/003)).\", \"modified\": \"2020-10-21T01:31:35.760Z\", \"id\": \"attack-pattern--bb5a00de-e086-4859-a231-fa793f6797e2\"}, \"attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:04.307Z\", \"name\": \"System Information Discovery\", \"attack_pattern_identifier\": \"T1082\", \"modified\": \"2020-03-26T18:17:42.298Z\", \"description\": \"An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nTools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS <code>systemsetup</code> command, but it requires administrative privileges.\\n\\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)\", \"id\": \"attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1\"}, \"attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-11T14:49:36.954Z\", \"name\": \"Malicious File\", \"attack_pattern_identifier\": \"T1204.002\", \"description\": \"An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\\n\\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) on the file to increase the likelihood that a user will open it.\\n\\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\", \"modified\": \"2020-03-11T14:55:56.177Z\", \"id\": \"attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e\"}, \"attack-pattern--322bad5a-1c49-4d23-ab79-76d641794afa\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:21.315Z\", \"name\": \"System Service Discovery\", \"attack_pattern_identifier\": \"T1007\", \"modified\": \"2020-03-15T01:05:08.805Z\", \"description\": \"Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \\\"sc,\\\" \\\"tasklist /svc\\\" using [Tasklist](https://attack.mitre.org/software/S0057), and \\\"net start\\\" using [Net](https://attack.mitre.org/software/S0039), but adversaries may also use other tools as well. Adversaries may use the information from [System Service Discovery](https://attack.mitre.org/techniques/T1007) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\", \"id\": \"attack-pattern--322bad5a-1c49-4d23-ab79-76d641794afa\"}, \"attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-15T16:13:46.151Z\", \"name\": \"Web Protocols\", \"attack_pattern_identifier\": \"T1071.001\", \"description\": \"Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \\n\\nProtocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. \", \"modified\": \"2020-03-26T20:15:35.821Z\", \"id\": \"attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161\"}, \"attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-23T22:02:48.566Z\", \"name\": \"Registry Run Keys / Startup Folder\", \"attack_pattern_identifier\": \"T1547.001\", \"description\": \"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \\\"run keys\\\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\\n\\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\\\Users\\\\[Username]\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup</code>. The startup folder path for all users is <code>C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\StartUp</code>.\\n\\nThe following run keys are created by default on Windows systems:\\n\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run</code>\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce</code>\\n* <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run</code>\\n* <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce</code>\\n\\nRun keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. (Citation: Microsoft RunOnceEx APR 2018) For example, it is possible to load a DLL at logon using a \\\"Depend\\\" key with RunOnceEx: <code>reg add HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx\\\\0001\\\\Depend /v 1 /d \\\"C:\\\\temp\\\\evil[.]dll\\\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\\n\\nThe following Registry keys can be used to set startup folder items for persistence:\\n\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders</code>\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Shell Folders</code>\\n* <code>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Shell Folders</code>\\n* <code>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders</code>\\n\\nThe following Registry keys can control automatic startup of services during boot:\\n\\n* <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServicesOnce</code>\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServicesOnce</code>\\n* <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServices</code>\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServices</code>\\n\\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\\n\\n* <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\Run</code>\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\Run</code>\\n\\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Userinit</code> and <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Shell</code> subkeys can automatically launch programs.\\n\\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows</code> run when any user logs on.\\n\\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Control\\\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\\n\\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.\", \"modified\": \"2020-08-03T16:30:26.918Z\", \"id\": \"attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279\"}, \"attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:55.892Z\", \"name\": \"Indicator Removal on Host\", \"attack_pattern_identifier\": \"T1070\", \"description\": \"Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as [Bash History](https://attack.mitre.org/techniques/T1139) and /var/log/*.\\n\\nThese actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This that may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.\", \"modified\": \"2020-10-16T18:09:49.074Z\", \"id\": \"attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69\"}}}"